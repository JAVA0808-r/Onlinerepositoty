// GeometricFigures.java
abstract class GeometricFigure {
    public abstract double area();
    public abstract double perimeter();
}

class Triangle extends GeometricFigure {
    private double sideA;
    private double sideB;
    private double sideC;

    public Triangle(double sideA, double sideB, double sideC) {
        this.sideA = sideA;
        this.sideB = sideB;
        this.sideC = sideC;
    }

    @Override
    public double area() {
        // Using Heron's formula
        double s = perimeter() / 2;
        return Math.sqrt(s * (s - sideA) * (s - sideB) * (s - sideC));
    }

    @Override
    public double perimeter() {
        return sideA + sideB + sideC;
    }

    // Getters and setters for encapsulation
    public double getSideA() {
        return sideA;
    }

    public void setSideA(double sideA) {
        this.sideA = sideA;
    }

    public double getSideB() {
        return sideB;
    }

    public void setSideB(double sideB) {
        this.sideB = sideB;
    }

    public double getSideC() {
        return sideC;
    }

    public void setSideC(double sideC) {
        this.sideC = sideC;
    }
}

class Trapezium extends GeometricFigure {
    private double sideA;
    private double sideB;
    private double high;

    public Trapezium(double sideA, double sideB, double high) {
        this.sideA = sideA;
        this.sideB = sideB;
        this.high = high;
    }

    @Override
    public double area() {
        return (sideA + sideB) * high / 2;
    }

    @Override
    public double perimeter() {
        // For a regular trapezium, we need more sides, but assuming it's isosceles
        double baseDifference = Math.abs(sideA - sideB) / 2;
        double sideC = Math.sqrt(Math.pow(high, 2) + Math.pow(baseDifference, 2));
        return sideA + sideB + 2 * sideC;
    }

    // Getters and setters for encapsulation
    public double getSideA() {
        return sideA;
    }

    public void setSideA(double sideA) {
        this.sideA = sideA;
    }

    public double getSideB() {
        return sideB;
    }

    public void setSideB(double sideB) {
        this.sideB = sideB;
    }

    public double getHigh() {
        return high;
    }

    public void setHigh(double high) {
        this.high = high;
    }
}

class Rectangle extends GeometricFigure {
    private double sideA;
    private double sideB;

    public Rectangle(double sideA, double sideB) {
        this.sideA = sideA;
        this.sideB = sideB;
    }

    @Override
    public double area() {
        return sideA * sideB;
    }

    @Override
    public double perimeter() {
        return 2 * (sideA + sideB);
    }

    // Getters and setters for encapsulation
    public double getSideA() {
        return sideA;
    }

    public void setSideA(double sideA) {
        this.sideA = sideA;
    }

    public double getSideB() {
        return sideB;
    }

    public void setSideB(double sideB) {
        this.sideB = sideB;
    }
}

// Animals.java
abstract class Animal {
    private String name;

    public Animal(String name) {
        this.name = name;
    }

    public abstract String sound();

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}

class Dog extends Animal {
    public Dog(String name) {
        super(name);
    }

    @Override
    public String sound() {
        return "bow bow";
    }
}

class Duck extends Animal {
    public Duck(String name) {
        super(name);
    }

    @Override
    public String sound() {
        return "quack quack";
    }
}

class Cat extends Animal {
    public Cat(String name) {
        super(name);
    }

    @Override
    public String sound() {
        return "meow meow";
    }
}

// Main.java
public class Main {
    public static void main(String[] args) {
        // Test Geometric Figures
        System.out.println("Geometric Figures:");
        
        Triangle triangle = new Triangle(3, 4, 5);
        System.out.println("Triangle - Area: " + triangle.area() + ", Perimeter: " + triangle.perimeter());
        
        Trapezium trapezium = new Trapezium(5, 7, 4);
        System.out.println("Trapezium - Area: " + trapezium.area() + ", Perimeter: " + trapezium.perimeter());
        
        Rectangle rectangle = new Rectangle(6, 8);
        System.out.println("Rectangle - Area: " + rectangle.area() + ", Perimeter: " + rectangle.perimeter());
        
        // Test Animals
        System.out.println("\nAnimals:");
        
        Dog dog = new Dog("Buddy");
        System.out.println(dog.getName() + " says: " + dog.sound());
        
        Duck duck = new Duck("Donald");
        System.out.println(duck.getName() + " says: " + duck.sound());
        
        Cat cat = new Cat("Whiskers");
        System.out.println(cat.getName() + " says: " + cat.sound());
    }
}
